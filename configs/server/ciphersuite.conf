# ciphersuite.conf for the SttreamServer
#
# This is the configuration for ciphersuites to be used by
# the StreamServer when sending a movie to proxies.

# These are session-ciphersuite configuration examples.
# Can have different combinations of correct and supported
# block or stream encryption algorithms, as well as proper
# modes and secure padding methods.
# Then your implementation must be beneric for different security
# cryptographic configurations

keystore-type: PKCS12
keystore: ./configs/keystore.p12
# isto pode ficar assim in clear?
keystore-password: SRSC1819

# renomear para master na 2ª fase?
#session-ciphersuite: AES/GCM/PKCS5Padding
session-ciphersuite: AES/CCM/PKCS5Padding
# the valid session key entry in he keystore
session-key: aes256-key

# Temos de perguntar o que é isto
hash-ciphersuite: SHA-256

inner-mac-ciphersuite: HMACSHA256
# the valid mac key (if used) in 	the keystore
inner-mac-key: mac256-key
outer-mac-ciphersuite: HMACSHA256
# the valid mac key (if used) in the keystore
outer-mac-key: mac128-key

#keytool -genseckey -noprompt -alias mac256-key -keyalg aes -keysize 256 -keystore keystore.p12 -storetype pkcs12 -dname "CN='', OU='', O='', L='', S='', C=''"
#keytool -list -v -keystore keystore.p12 -storetype pkcs12

# Notes on the above configuration example:
# a) mac and hash ciphersuites can be used alternatively
#    but must be supported both in the configuration and implementation
# b) for the case of mac ciphersuites, your solution must be ready to use
#    use HMACs, as well as CMACs, transparently.
# b) all the required keys are stored in the configured keystore 
#    (storetype jecks)
# c) if you want you can also use PKCS12 ksystores. 
#    See keytool and java docs for details
# d) of course that you will need in certain configurations (modes) 
#    initialization vectors or counters.
#    However your solutio must manage the establishment of such vectors
#    and counters in a dynamic secure way (no need to be statically defined)


